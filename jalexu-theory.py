"""
@Jalexu wants a deterministic steno theory, cause they don't like the idea of adding words into their dictionary forever
"""


starter_letter={
    "":"",
'^STKPWHR': 'a disgl',
'^STKPWH': 'a z',
'^STKPWR': 'a disgr',
'^STKPW': 'a disg',
'^STKPHR': 'a displ',
'^STKPH': 'a dism',
'^STKPR': 'astxr',
'^STKP': 'a disp',
'^STKWHR': 'asdevl',
'^STKWH': 'asdevh',
'^STKWR': 'asty',
'^STKW': 'a disw',
'^STKHR': 'a disl',
'^STKH': 'a dish',
'^STKR': 'a disr',
'^STK': 'a dis',
'^STPWHR': 'astbl',
'^STPWH': 'astbh',
'^STPWR': 'astbr',
'^STPW': 'astb',
'^STPHR': 'astpl',
'^STPH': 'asn',
'^STPR': 'asfr',
'^STP': 'asf',
'^STWHR': 'astwl',
'^STWH': 'astwh',
'^STWR': 'astwr',
'^STW': 'astw',
'^STHR': 'astl',
'^STH': 'asth',
'^STR': 'astr',
'^ST': 'ast',
'^SKPWHR': 'asimpl',
'^SKPWH': 'asimph',
'^SKPWR': 'asimpr',
'^SKPW': 'exb',
'^SKPHR': 'expl',
'^SKPH': 'em',
'^SKPR': 'aand r',
'^SKP': 'aand ',
'^SKWHR': 'asqul',
'^SKWH': 'asquh',
'^SKWR': 'eng',
'^SKW': 'exw',
'^SKHR': 'excl',
'^SKH': 'exh',
'^SKR': 'excr',
'^SK': 'ex',
'^SPWHR': 'aintl',
'^SPWH': 'ainth',
'^SPWR': 'aintr',
'^SPW': 'aint',
'^SPHR': 'aspl',
'^SPH': 'asm',
'^SPR': 'aspr',
'^SP': 'asp',
'^SWHR': 'aswl',
'^SWH': 'aswh',
'^SWR': 'aswr',
'^SW': 'asw',
'^SHR': 'asl',
'^SH': 'ash',
'^SR': 'av',
'^S': 'as',
'^TKPWHR': 'agl',
'^TKPWH': 'agh',
'^TKPWR': 'agr',
'^TKPW': 'ag',
'^TKPHR': 'adpl',
'^TKPH': 'adm',
'^TKPR': 'atxr',
'^TKP': 'atx',
'^TKWHR': 'adevl',
'^TKWH': 'adevh',
'^TKWR': 'aty',
'^TKW': 'adev',
'^TKHR': 'adl',
'^TKH': 'atch',
'^TKR': 'atc',
'^TK': 'ad',
'^TPWHR': 'atbl',
'^TPWH': 'atbh',
'^TPWR': 'atbr',
'^TPW': 'atb',
'^TPHR': 'on r',
'^TPH': 'on ',
'^TPR': 'afr',
'^TP': 'af',
'^TWHR': 'atwl',
'^TWH': 'atwh',
'^TWR': 'atwr',
'^TW': 'atw',
'^THR': 'atl',
'^TH': 'ath',
'^TR': 'atr',
'^T': 'at',
'^KPWHR': 'aimpl',
'^KPWH': 'aimph',
'^KPWR': 'aimpr',
'^KPW': 'aimp',
'^KPHR': 'akpl',
'^KPH': 'akm',
'^KPR': 'axr',
'^KP': 'ax',
'^KWHR': 'aqul',
'^KWH': 'aquh',
'^KWR': 'ay',
'^KW': 'aqu',
'^KHR': 'akl',
'^KH': 'ach',
'^KR': 'ac',
'^K': 'ak',
'^PWHR': 'abl',
'^PWH': 'abh',
'^PWR': 'abr',
'^PW': 'ab',
'^PHR': 'apl',
'^PH': 'am',
'^PR': 'apr',
'^P': 'ap',
'^WHR': 'awl',
'^WH': 'awh',
'^WR': 'awr',
'^W': 'aw',
'^HR': 'al',
'^H': 'ah',
'^R': 'ar',
'^': 'a',
'STKPWHR': 'disgl',
'STKPWH': 'z',
'STKPWR': 'disgr',
'STKPW': 'disg',
'STKPHR': 'displ',
'STKPH': 'dism',
'STKPR': 'stxr',
'STKP': 'disp',
'STKWHR': 'sdevl',
'STKWH': 'sdevh',
'STKWR': 'sty',
'STKW': 'sdev',
'STKHR': 'disl',
'STKH': 'dish',
'STKR': 'disr',
'STK': 'dis',
'STPWHR': 'stbl',
'STPWH': 'stbh',
'STPWR': 'stbr',
'STPW': 'stb',
'STPHR': 'stpl',
'STPH': 'sn',
'STPR': 'sfr',
'STP': 'sf',
'STWHR': 'stwl',
'STWH': 'stwh',
'STWR': 'stwr',
'STW': 'stw',
'STHR': 'stl',
'STH': 'sth',
'STR': 'str',
'ST': 'st',
'SKPWHR': 'simpl',
'SKPWH': 'simph',
'SKPWR': 'simpr',
'SKPW': 'simp',
'SKPHR': 'and l',
'SKPH': 'im',
'SKPR': 'and r',
'SKP': 'and ',
'SKWHR': 'squl',
'SKWH': 'squh',
'SKWR': 'j',
'SKW': 'squ',
'SKHR': 'shr',
'SKH': 'sch',
'SKR': 'sc',
'SK': 'sk',
'SPWHR': 'intl',
'SPWH': 'inth',
'SPWR': 'intr',
'SPW': 'int',
'SPHR': 'spl',
'SPH': 'sm',
'SPR': 'spr',
'SP': 'sp',
'SWHR': 'swl',
'SWH': 'swh',
'SWR': 'swr',
'SW': 'sw',
'SHR': 'sl',
'SH': 'sh',
'SR': 'v',
'S': 's',
'TKPWHR': 'gl',
'TKPWH': 'gh',
'TKPWR': 'gr',
'TKPW': 'g',
'TKPHR': 'dpl',
'TKPH': 'dm',
'TKPR': 'txr',
'TKP': 'tx',
'TKWHR': 'devl',
'TKWH': 'devh',
'TKWR': 'ty',
'TKW': 'dev',
'TKHR': 'dl',
'TKH': 'tch',
'TKR': 'tc',
'TK': 'd',
'TPWHR': 'tbl',
'TPWH': 'tbh',
'TPWR': 'tbr',
'TPW': 'tb',
'TPHR': 'tpl',
'TPH': 'n',
'TPR': 'fr',
'TP': 'f',
'TWHR': 'twl',
'TWH': 'twh',
'TWR': 'twr',
'TW': 'tw',
'THR': 'tl',
'TH': 'th',
'TR': 'tr',
'T': 't',
'KPWHR': 'impl',
'KPWH': 'imph',
'KPWR': 'impr',
'KPW': 'imp',
'KPHR': 'kpl',
'KPH': 'km',
'KPR': 'xr',
'KP': 'x',
'KWHR': 'qul',
'KWH': 'quh',
'KWR': 'y',
'KW': 'qu',
'KHR': 'kl',
'KH': 'ch',
'KR': 'c',
'K': 'k',
'PWHR': 'bl',
'PWH': 'bh',
'PWR': 'br',
'PW': 'b',
'PHR': 'pl',
'PH': 'm',
'PR': 'pr',
'P': 'p',
'WHR': 'wl',
'WH': 'wh',
'WR': 'wr',
'W': 'w',
'HR': 'l',
'H': 'h',
'R': 'r',
}


vowels={
    "-":[["",""],""],
    
    "":[["",""],""],

    "*":[["",""],""],

    "A"   :[["a",""],"a"],
    "AO"  :[["oo",""],"oo"],
    "AOE" :[["ee",""],"ee"],
    "AOEU":[["i","+"],"ie"],
    "AOU" :[["u","+"],"ew"], #or "due" or "dew"?
    "AE"  :[["ea",""],"y"],  #why not
    "AEU" :[["a","+"],"ay"], #or "ai" (can just two stroke them easily)
    "AU"  :[["au",""],"aw"], #or "aw" if at the end

    "O"   :[["o",""],"o"],
    "OE"  :[["o","+"],"ow"], #or "ow" if at the end
    "OEU" :[["oi",""],"oy"], #or "oy" if at the end
    "OU"  :[["ou",""],"ow"], #or "ow" if at the end

    "E"   :[["e",""],"e"],
    "EU"  :[["i",""],"i"],          #or "y" if at the end????

    "U"   :[["u",""],"u"]
}

ender_letter={
    "":"",
'*FRPBLTSD': 'nchlltsed',
'*FRPBLTS': 'nchlltse',
'*FRPBLTD': 'nchlltd',
'*FRPBLT': 'nchllt',
'*FRPBLSD': 'nchllsed',
'*FRPBLS': 'nchllse',
'*FRPBLD': 'nchlld',
'*FRPBL': 'nchll',
'*FRPBGTSD': 'nchxtsed',
'*FRPBGTS': 'nchxtse',
'*FRPBGTD': 'nchxtd',
'*FRPBGT': 'nchxt',
'*FRPBGSD': 'nchtiond',
'*FRPBGS': 'nchtion',
'*FRPBGD': 'nchgd',
'*FRPBG': 'nchg',
'*FRPBTSD': 'nchtsd',
'*FRPBTS': 'nchts',
'*FRPBTD': 'nchtd',
'*FRPBT': 'ncht',
'*FRPBSD': 'nchsed',
'*FRPBS': 'nchse',
'*FRPBD': 'nchd',
'*FRPB': 'nch',
'*FRBGTSD': 'rfxtsed',
'*FRBGTS': 'rfxtse',
'*FRBGTD': 'rfxtd',
'*FRBGT': 'rfxt',
'*FRBGSD': 'rftiond',
'*FRBGS': 'rftion',
'*FRBGD': 'rfgd',
'*FRBG': 'rfg',
'*FRBTSD': 'rftsd',
'*FRBTS': 'rfts',
'*FRBTD': 'rftd',
'*FRBT': 'rft',
'*FRBSD': 'rfsed',
'*FRBS': 'rfse',
'*FRBD': 'rfd',
'*FRB': 'rf',
'*FTSD': 'ftsed',
'*FTS': 'ftse',
'*FTD': 'ftd',
'*FT': 'ft',
'*PBGTSD': 'nktsd',
'*PBGTS': 'nkts',
'*PBGTD': 'nktd',
'*PBGT': 'nkt',
'*PBGD': 'nkd',
'*PBG': 'nk',
'*PLGTSD': 'lpxtsed',
'*PLGTS': 'lpxtse',
'*PLGTD': 'lpxtd',
'*PLGT': 'lpxt',
'*PLGSD': 'lptiond',
'*PLGS': 'lption',
'*PLGD': 'lpgd',
'*PLG': 'lpg',
'*PLTSD': 'lptsd',
'*PLTS': 'lpts',
'*PLTD': 'lptd',
'*PLT': 'lpt',
'*PLSD': 'lpsed',
'*PLS': 'lpse',
'*PLD': 'lpd',
'*PL': 'lp',
'*BLGTSD': 'llowxtsed',
'*BLGTS': 'llowxtse',
'*BLGTD': 'llowxtd',
'*BLGT': 'llowxt',
'*BLGSD': 'llowtiond',
'*BLGS': 'llowtion',
'*BLTSD': 'llowtsd',
'*BLTS': 'llowts',
'*BLTD': 'llowtd',
'*BLT': 'llowt',
'*BLSD': 'llowsed',
'*BLS': 'llowse',
'*BLD': 'llowd',
'*BL': 'llow',
'*BGSD': 'ctiond',
'*BGS': 'ction',
'*LGTSD': 'lktsd',
'*LGTS': 'lkts',
'*LGTD': 'lktd',
'*LGT': 'lkt',
'*LGSD': 'lksed',
'*LGS': 'lkse',
'*LGD': 'lkd',
'*LG': 'lk',
'*LTSD': 'ttlesed',
'*LTS': 'ttlese',
'*LTD': 'ttled',
'*LT': 'ttle',
'*LD': 'ddle',
'*TD': 'thd',
'*T': 'th',
'*SD': 'ced',
'*S': 'ce',
'*D': 'y',
'FRPBLGTSD': 'magetsd',
'FRPBLGTS': 'magets',
'FRPBLGTD': 'magetd',
'FRPBLGT': 'maget',
'FRPBLGSD': 'verjectiond',
'FRPBLGS': 'verjection',
'FRPBLGD': 'maged',
'FRPBLG': 'mage',
'FRPBLTSD': 'mpbbletsed',
'FRPBLTS': 'mpbbletse',
'FRPBLTD': 'mpbbletd',
'FRPBLT': 'mpbblet',
'FRPBLSD': 'mpbblesed',
'FRPBLS': 'mpbblese',
'FRPBLD': 'mpbbled',
'FRPBL': 'mpbble',
'FRPBGTSD': 'rchxtsed',
'FRPBGTS': 'rchxtse',
'FRPBGTD': 'rchxtd',
'FRPBGT': 'rchxt',
'FRPBGSD': 'vernctiond',
'FRPBGS': 'vernction',
'FRPBGD': 'verngd',
'FRPBG': 'verng',
'FRPBTSD': 'rchtsd',
'FRPBTS': 'rchts',
'FRPBTD': 'rchtd',
'FRPBT': 'rcht',
'FRPBSD': 'rchsed',
'FRPBS': 'rchse',
'FRPBD': 'rchd',
'FRPB': 'rch',
'FRPLGTSD': 'mplextsed',
'FRPLGTS': 'mplextse',
'FRPLGTD': 'mplextd',
'FRPLGT': 'mplext',
'FRPLGSD': 'mpletiond',
'FRPLGS': 'mpletion',
'FRPLGD': 'mplegd',
'FRPLG': 'mpleg',
'FRPLTSD': 'mpletsd',
'FRPLTS': 'mplets',
'FRPLTD': 'mpletd',
'FRPLT': 'mplet',
'FRPLSD': 'mplesed',
'FRPLS': 'mplese',
'FRPLD': 'mpled',
'FRPL': 'mple',
'FRPGTSD': 'mpxtsed',
'FRPGTS': 'mpxtse',
'FRPGTD': 'mpxtd',
'FRPGT': 'mpxt',
'FRPGSD': 'mptiond',
'FRPGS': 'mption',
'FRPGD': 'mpgd',
'FRPG': 'mpg',
'FRPTSD': 'mptsd',
'FRPTS': 'mpts',
'FRPTD': 'mptd',
'FRPT': 'mpt',
'FRPSD': 'mpsed',
'FRPS': 'mpse',
'FRPD': 'mpd',
'FRP': 'mp',
'FRBLGTSD': 'mblextsed',
'FRBLGTS': 'mblextse',
'FRBLGTD': 'mblextd',
'FRBLGT': 'mblext',
'FRBLGSD': 'mbletiond',
'FRBLGS': 'mbletion',
'FRBLGD': 'verckled',
'FRBLG': 'verckle',
'FRBLTSD': 'mbletsd',
'FRBLTS': 'mblets',
'FRBLTD': 'mbletd',
'FRBLT': 'mblet',
'FRBLSD': 'mblesed',
'FRBLS': 'mblese',
'FRBLD': 'mbled',
'FRBL': 'mble',
'FRBGTSD': 'rvextsed',
'FRBGTS': 'rvextse',
'FRBGTD': 'rvextd',
'FRBGT': 'rvext',
'FRBGSD': 'f, d',
'FRBGS': 'f, ',
'FRBGD': 'frkd',
'FRBG': 'frk',
'FRBTSD': 'rvetsd',
'FRBTS': 'rvets',
'FRBTD': 'ftiald',
'FRBT': 'ftial',
'FRBSD': 'ftiousd',
'FRBS': 'ftious',
'FRBD': 'rved',
'FRB': 'rve',
'FRLGTSD': 'mlextsed',
'FRLGTS': 'mlextse',
'FRLGTD': 'mlextd',
'FRLGT': 'mlext',
'FRLGSD': 'mletiond',
'FRLGS': 'mletion',
'FRLGD': 'mlegd',
'FRLG': 'mleg',
'FRLTSD': 'mletsd',
'FRLTS': 'mlets',
'FRLTD': 'mletd',
'FRLT': 'mlet',
'FRLSD': 'mlesed',
'FRLS': 'mlese',
'FRLD': 'mled',
'FRL': 'mle',
'FRGTSD': 'verxtsed',
'FRGTS': 'verxtse',
'FRGTD': 'verxtd',
'FRGT': 'verxt',
'FRGSD': 'vertiond',
'FRGS': 'vertion',
'FRGD': 'vergd',
'FRG': 'verg',
'FRTSD': 'vertsd',
'FRTS': 'verts',
'FRTD': 'vertd',
'FRT': 'vert',
'FRSD': 'versed',
'FRS': 'verse',
'FRD': 'verd',
'FR': 'ver',
'FPBLGTSD': 'fdgetsed',
'FPBLGTS': 'fdgetse',
'FPBLGTD': 'fdgetd',
'FPBLGT': 'fdget',
'FPBLGSD': 'fjectiond',
'FPBLGS': 'fjection',
'FPBLGD': 'fdged',
'FPBLG': 'fdge',
'FPBLTSD': 'chbbletsed',
'FPBLTS': 'chbbletse',
'FPBLTD': 'chbbletd',
'FPBLT': 'chbblet',
'FPBLSD': 'chbblesed',
'FPBLS': 'chbblese',
'FPBLD': 'chbbled',
'FPBL': 'chbble',
'FPBGTSD': 'venxtsed',
'FPBGTS': 'venxtse',
'FPBGTD': 'venxtd',
'FPBGT': 'venxt',
'FPBGSD': 'fnctiond',
'FPBGS': 'fnction',
'FPBGD': 'fngd',
'FPBG': 'fng',
'FPBTSD': 'ventsd',
'FPBTS': 'vents',
'FPBTD': 'ventd',
'FPBT': 'vent',
'FPBSD': 'vensed',
'FPBS': 'vense',
'FPBD': 'vend',
'FPB': 'ven',
'FPLGTSD': 'tualxtsed',
'FPLGTS': 'tualxtse',
'FPLGTD': 'tualxtd',
'FPLGT': 'tualxt',
'FPLGSD': 'tualtiond',
'FPLGS': 'tualtion',
'FPLGD': 'tualgd',
'FPLG': 'tualg',
'FPLTSD': 'tualtsd',
'FPLTS': 'tualts',
'FPLTD': '. d',
'FPLT': '. ',
'FPLSD': 'tualsed',
'FPLS': 'tualse',
'FPLD': 'tuald',
'FPL': 'tual',
'FPGTSD': 'chxtsed',
'FPGTS': 'chxtse',
'FPGTD': 'chxtd',
'FPGT': 'chxt',
'FPGSD': 'chtiond',
'FPGS': 'chtion',
'FPGD': 'chgd',
'FPG': 'chg',
'FPTSD': 'chtsd',
'FPTS': 'chts',
'FPTD': 'chtd',
'FPT': 'cht',
'FPSD': 'chsed',
'FPS': 'chse',
'FPD': 'chd',
'FP': 'ch',
'FBLGTSD': 'fckletsed',
'FBLGTS': 'fckletse',
'FBLGTD': 'fckletd',
'FBLGT': 'fcklet',
'FBLGSD': 'fcklesed',
'FBLGS': 'fcklese',
'FBLGD': 'fckled',
'FBLG': 'fckle',
'FBLTSD': 'fbbletsed',
'FBLTS': 'fbbletse',
'FBLTD': 'fbbletd',
'FBLT': 'fbblet',
'FBLSD': 'fbblesed',
'FBLS': 'fbblese',
'FBLD': 'fbbled',
'FBL': 'fbble',
'FBGTSD': 'vextsed',
'FBGTS': 'vextse',
'FBGTD': 'vextd',
'FBGT': 'vext',
'FBGSD': 'fxd',
'FBGS': 'fx',
'FBGD': 'fckd',
'FBG': 'fck',
'FBTSD': 'vetsd',
'FBTS': 'vets',
'FBTD': 'vetd',
'FBT': 'vet',
'FBSD': 'vesed',
'FBS': 'vese',
'FBD': 'ved',
'FB': 've',
'FLGTSD': 'fflextsed',
'FLGTS': 'fflextse',
'FLGTD': 'fflextd',
'FLGT': 'fflext',
'FLGSD': 'ffletiond',
'FLGS': 'ffletion',
'FLGD': 'fflegd',
'FLG': 'ffleg',
'FLTSD': 'ffletsd',
'FLTS': 'fflets',
'FLTD': 'ffletd',
'FLT': 'fflet',
'FLSD': 'fflesed',
'FLS': 'fflese',
'FLD': 'ffled',
'FL': 'ffle',
'FGTSD': 'fxtsed',
'FGTS': 'fxtse',
'FGTD': 'fxtd',
'FGT': 'fxt',
'FGSD': 'ftiond',
'FGS': 'ftion',
'FGD': 'fgd',
'FG': 'fg',
'FTSD': 'ftsd',
'FTS': 'fts',
'FTD': 'std',
'FT': 'st',
'FSD': 'fsed',
'FS': 'fse',
'FD': 'fd',
'F': 'f',
'RPBLGTSD': 'rgetsd',
'RPBLGTS': 'rgets',
'RPBLGTD': 'rgetd',
'RPBLGT': 'rget',
'RPBLGSD': 'rjectiond',
'RPBLGS': 'rjection',
'RPBLGD': 'rged',
'RPBLG': 'rge',
'RPBLTSD': 'rnlltsed',
'RPBLTS': 'rnlltse',
'RPBLTD': 'rnlltd',
'RPBLT': 'rnllt',
'RPBLSD': 'rnllsed',
'RPBLS': 'rnllse',
'RPBLD': 'rnlld',
'RPBL': 'rnll',
'RPBGTSD': 'rngtsed',
'RPBGTS': 'rngtse',
'RPBGTD': 'rngtd',
'RPBGT': 'rngt',
'RPBGSD': 'rnctiond',
'RPBGS': 'rnction',
'RPBGD': 'rngd',
'RPBG': 'rng',
'RPBTSD': 'rntsed',
'RPBTS': 'rntse',
'RPBTD': 'rntd',
'RPBT': 'rnt',
'RPBSD': 'rnsed',
'RPBS': 'rnse',
'RPBD': 'rnd',
'RPB': 'rn',
'RPLGTSD': 'rmgtsed',
'RPLGTS': 'rmgtse',
'RPLGTD': 'rmgtd',
'RPLGT': 'rmgt',
'RPLGSD': 'rmgsed',
'RPLGS': 'rmgse',
'RPLGD': 'rmgd',
'RPLG': 'rmg',
'RPLTSD': 'rmtsed',
'RPLTS': 'rmtse',
'RPLTD': 'rmtd',
'RPLT': 'rmt',
'RPLSD': 'rmsed',
'RPLS': 'rmse',
'RPLD': 'rmd',
'RPL': 'rm',
'RPGTSD': 'rpgtsed',
'RPGTS': 'rpgtse',
'RPGTD': 'rpgtd',
'RPGT': 'rpgt',
'RPGSD': 'rpgsed',
'RPGS': 'rpgse',
'RPGD': 'rpgd',
'RPG': 'rpg',
'RPTSD': 'rptsed',
'RPTS': 'rptse',
'RPTD': 'rptd',
'RPT': 'rpt',
'RPSD': 'rpsed',
'RPS': 'rpse',
'RPD': 'rpd',
'RP': 'rp',
'RBLGTSD': 'rrowxtsed',
'RBLGTS': 'rrowxtse',
'RBLGTD': 'rrowxtd',
'RBLGT': 'rrowxt',
'RBLGSD': 'rrowtiond',
'RBLGS': 'rrowtion',
'RBLGD': 'rckled',
'RBLG': 'rckle',
'RBLTSD': 'rrowtsd',
'RBLTS': 'rrowts',
'RBLTD': 'rrowtd',
'RBLT': 'rrowt',
'RBLSD': 'rrowsed',
'RBLS': 'rrowse',
'RBLD': 'rrowd',
'RBL': 'rrow',
'RBGTSD': 'rktsd',
'RBGTS': 'rkts',
'RBGTD': 'shxtd',
'RBGT': 'shxt',
'RBGSD': ', d',
'RBGS': ', ',
'RBGD': 'rkd',
'RBG': 'rk',
'RBTSD': 'shtsd',
'RBTS': 'shts',
'RBTD': 'tiald',
'RBT': 'tial',
'RBSD': 'tiousd',
'RBS': 'tious',
'RBD': 'shd',
'RB': 'sh',
'RLGTSD': 'rlxtsed',
'RLGTS': 'rlxtse',
'RLGTD': 'rlxtd',
'RLGT': 'rlxt',
'RLGSD': 'rltiond',
'RLGS': 'rltion',
'RLGD': 'rlgd',
'RLG': 'rlg',
'RLTSD': 'rltsd',
'RLTS': 'rlts',
'RLTD': 'rltd',
'RLT': 'rlt',
'RLSD': 'rlsed',
'RLS': 'rlse',
'RLD': 'rld',
'RL': 'rl',
'RGTSD': 'rxtsed',
'RGTS': 'rxtse',
'RGTD': 'rxtd',
'RGT': 'rxt',
'RGSD': 'rtiond',
'RGS': 'rtion',
'RGD': 'rgd',
'RG': 'rg',
'RTSD': 'rtsd',
'RTS': 'rts',
'RTD': 'rtd',
'RT': 'rt',
'RSD': 'rsed',
'RS': 'rse',
'RD': 'rd',
'R': 'r',
'PBLGTSD': 'dgetsd',
'PBLGTS': 'dgets',
'PBLGTD': 'dgetd',
'PBLGT': 'dget',
'PBLGSD': 'jectiond',
'PBLGS': 'jection',
'PBLGD': 'dged',
'PBLG': 'dge',
'PBLTSD': 'pbbletsed',
'PBLTS': 'pbbletse',
'PBLTD': 'pbbletd',
'PBLT': 'pbblet',
'PBLSD': 'pbblesed',
'PBLS': 'pbblese',
'PBLD': 'pbbled',
'PBL': 'pbble',
'PBGTSD': 'ngtsd',
'PBGTS': 'ngts',
'PBGTD': 'nxtd',
'PBGT': 'nxt',
'PBGSD': 'nctiond',
'PBGS': 'nction',
'PBGD': 'ngd',
'PBG': 'ng',
'PBTSD': 'ntsd',
'PBTS': 'nts',
'PBTD': 'ntd',
'PBT': 'nt',
'PBSD': 'nsed',
'PBS': 'nse',
'PBD': 'nd',
'PB': 'n',
'PLGTSD': 'mxtsed',
'PLGTS': 'mxtse',
'PLGTD': 'mxtd',
'PLGT': 'mxt',
'PLGSD': 'mtiond',
'PLGS': 'mtion',
'PLGD': 'mgd',
'PLG': 'mg',
'PLTSD': 'mtsd',
'PLTS': 'mts',
'PLTD': 'mtd',
'PLT': 'mt',
'PLSD': 'msed',
'PLS': 'mse',
'PLD': 'md',
'PL': 'm',
'PGTSD': 'pxtsed',
'PGTS': 'pxtse',
'PGTD': 'pxtd',
'PGT': 'pxt',
'PGSD': 'ptiond',
'PGS': 'ption',
'PGD': 'pgd',
'PG': 'pg',
'PTSD': 'ptsd',
'PTS': 'pts',
'PTD': 'ptd',
'PT': 'pt',
'PSD': 'psed',
'PS': 'pse',
'PD': 'pd',
'P': 'p',
'BLGTSD': 'ckletsd',
'BLGTS': 'cklets',
'BLGTD': 'bblextd',
'BLGT': 'bblext',
'BLGSD': 'bbletiond',
'BLGS': 'bbletion',
'BLGD': 'ckled',
'BLG': 'ckle',
'BLTSD': 'bbletsd',
'BLTS': 'bblets',
'BLTD': 'bbletd',
'BLT': 'bblet',
'BLSD': 'bblesed',
'BLS': 'bblese',
'BLD': 'bbled',
'BL': 'bble',
'BGTSD': 'cktsd',
'BGTS': 'ckts',
'BGTD': 'bxtd',
'BGT': 'bxt',
'BGSD': 'xd',
'BGS': 'x',
'BGD': 'ckd',
'BG': 'ck',
'BTSD': 'btsd',
'BTS': 'bts',
'BTD': 'btd',
'BT': 'bt',
'BSD': 'bsed',
'BS': 'bse',
'BD': 'bd',
'B': 'b',
'LGTSD': 'llxtsed',
'LGTS': 'llxtse',
'LGTD': 'llxtd',
'LGT': 'llxt',
'LGSD': 'lltiond',
'LGS': 'lltion',
'LGD': 'llgd',
'LG': 'llg',
'LTSD': 'lltsd',
'LTS': 'llts',
'LTD': 'lltd',
'LT': 'llt',
'LSD': 'llsed',
'LS': 'llse',
'LD': 'lld',
'L': 'll',
'GTSD': 'gtsd',
'GTS': 'gts',
'GTD': 'xtd',
'GT': 'xt',
'GSD': 'tiond',
'GS': 'tion',
'GD': 'gd',
'G': 'g',
'TSD': 'tsd',
'TS': 'ts',
'TD': 'td',
'T': 't',
'SD': 'sed',
'S': 'se',
'D': 'd',
}


zed_key={
    "":"",
    "Z":"s" #logic that it doesn't count as a consonant, something to do with ending e from the vowels
}


import re

LONGEST_KEY = 1

numbers_to_letters = {
    "1": "S",
    "2": "T",
    "3": "P",
    "4": "H",
    "5": "A",
    "6": "F",
    "7": "P",
    "8": "L",
    "9": "T",
    "0": "O"
    }

def aericks_denumberizer(old_outline):

    old_strokes = old_outline.split("/")
    new_strokes = []

    for stroke in old_strokes:

        new_strokes.append(stroke)

        for match in numbers_to_letters.keys():

            if match in stroke:

                if new_strokes[-1][0] != "#":
                    new_strokes[-1] = "#" + new_strokes[-1]

                new_strokes[-1] = new_strokes[-1].replace(match, numbers_to_letters[match])

        if new_strokes == []:
            new_strokes = old_strokes

    return "/".join(new_strokes)


def lookup(strokes):

    #I don't know what this does
    assert len(strokes) <= LONGEST_KEY, '%d/%d' % (len(strokes), LONGEST_KEY)

    if strokes[0]=="TK-LS":
        return("{^^}")

    

    #match the strokes
    match= re.fullmatch(
        #dissect the string to starter_letters, vowels and ender_letters
        r'(#?)(\^?S?T?K?P?W?H?R?)(A?O?\*?\-?E?U?)(F?R?P?B?L?G?T?S?D?)(Z?)',

        #this string:
        aericks_denumberizer(strokes[0]))

    if "*" in match[2]:
        raise KeyError

    if not match:
        raise KeyError

    #If there's no vowel
    #if match[2]=="":
    #    raise KeyError``

    if match[1]=="#":
        start_thing=starter_letter[match[2]].capitalize()
    else:
        start_thing=starter_letter[match[2]]
    if match[4]=="":
        return(
            start_thing+
            vowels[match[3]][1]+
            #ender_letter[match[4]]+
            zed_key[match[5]]
            )
    else:
        return(
            start_thing+
            vowels[match[3]][0][0]+
            ender_letter[match[4]]+
            vowels[match[3]][0][1]+
            zed_key[match[5]]
        ).replace("e+","e").replace("+","e")



